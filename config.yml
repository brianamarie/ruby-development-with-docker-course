title: Ruby Development With Docker
description: Learn how to develop Ruby by leveraging docker.

template:
  repo: ruby-development-with-docker-template
  name: ruby-development-with-docker

before:
  - type: createPullRequest
    title: Welcome!
    body: 01_pull_body.md
    head: add-ruby-to-dockerfile
    action_id: first_pr

steps:
  # TODO: add gates for actual checks against GH actions

  # introduce user to creating a container, adding Ruby by using a parent container
  - title: Create your Ruby Docker container
    description: Create a docker container with Ruby installed.
    link: '{{ repoUrl }}/pull/1'
    event:
      - status.state
      - pull_request.synchronize
    actions:
      # first checking that the user didn't change the CI tests
      - type: getPullRequest
        action_id: pull_request
      - type: getFileContents
        filename: '.github/workflows/main.yml'
        sha: '%actions.pull_request.data.head.sha%'
        action_id: contents
      - type: gate
        left: ''
        operator: ===
        right: '%actions.contents%'
        else:
          - type: respond
            with: 00_changed_actions_config.md

      # now check that the GH action actually succeeded
      - type: gate
        left: "%payload.state%"
        operator: ===
        right: success
        # expect that a status from GH actions comes in here
        # first version of the GH action CI tests just makes sure that ruby and bundle exist in the container
        else:
          - type: respond
            with: 01_did_not_change_to_ruby_base.md

      - type: createPullRequest
        title: Building Up The Ruby Environment
        body: 02_pull_body.md
        head: adding-gemfile
        action_id: second_pr
      - type: respond
        issue: Welcome!
        with: 01_pull_request_dockerfile_updated.md
        data:
          dependenciesPRLink: '{{ actions.second_pr.data.html_url }}'
      - type: mergePullRequest
        pullRequest: Welcome!
      - type: deleteBranch
        branch: add-ruby-to-dockerfile

  # introduce user to the concept of installing dependencies, persisting them via containers
  - title: Adding Dependencies into Your Docker Container
    description: Create your Gemfile, installing dependencies into your container.
    event: pull_request.synchronize
    link: '{{ repoUrl }}/pull/2'
    actions:
      - type: createPullRequest
        title: Writing Code!
        body: 03_pull_body.md
        head: adding-code
        action_id: third_pr
      - type: respond
        issue: Building Up The Ruby Environment
        with: 02_dependencies_added.md
        data:
          finalPRLink: '{{ actions.third_pr.data.html_url }}'
      - type: mergePullRequest
        pullRequest: Building Up The Ruby Environment
      - type: deleteBranch
        branch: adding-gemfile

  # finally write some code, teach user how to run tests in the container locally
  - title: Writing Code!
    description: Start writing code, learn how to develop within your container.
    event: pull_request.synchronize
    link: '{{ repoUrl }}/pull/3'
    actions:
      - type: respond
        issue: Writing Code!
        with: 03_congrats.md
      - type: mergePullRequest
        pullRequest: Writing Code!
      - type: deleteBranch
        branch: adding-code
